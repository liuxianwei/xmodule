<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
	<!-- 引入配置文件 -->
	<properties resource="mybatis-codegen-upms.properties" />
	<context id="mybatisGenerator" targetRuntime="MyBatis3Simple" defaultModelType="flat">
		<!-- 生成的文件编码 -->
		<property name="javaFileEncoding" value="UTF-8"/>
		<!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
		<property name="beginningDelimiter" value="`"/>
    	<property name="endingDelimiter" value="`"/>
    	
    	<plugin type="com.penglecode.xmodule.common.codegen.mybatis.CustomMysqlGeneratorPlugin">
    		<!-- 解决MybatisGenerator设置overwrite=false时仅对Java文件有效,XML文件无效的问题 -->
    		<property name="mergeableXmlMapper" value="false"/>
    	</plugin>
    	
		<commentGenerator type="com.penglecode.xmodule.common.codegen.mybatis.CustomCommentGenerator">
			<!-- 取消默认生成的注释 -->
			<property name="suppressAllComments" value="true"/>
		</commentGenerator>
		<!-- 数据库连接 -->
		<jdbcConnection driverClass="${jdbc.driver}" connectionURL="${jdbc.url}" userId="${jdbc.username}" password="${jdbc.password}">
		</jdbcConnection>
		<!-- 指定生成的类型为java类型，避免数据库中number等类型字段 -->
		<javaTypeResolver type="com.penglecode.xmodule.common.codegen.mybatis.CustomJavaTypeResolver">
			<property name="forceBigDecimals" value="false"/>
			<!-- 数据库date/datetime类型的字段,在Model中定义为String类型 -->
			<property name="forceDateTimeStampAsString" value="true"/>
			<!-- 数据库tinyint类型的字段,在Model中定义为Integer类型 -->
			<property name="forceTinyintAsInteger" value="true"/>
			<!-- 数据库tinyint(1)/number(1)/integer(1)类型的字段,在Model中定义为Boolean类型 -->
			<property name="forceNumber1AsBoolean" value="true"/>
			<!-- 数据库decimal/numeric类型的字段,在Model中定义为Double类型 -->
			<property name="forceDecimalNumericAsDouble" value="true"/>
		</javaTypeResolver>
		<!-- 生成model模型，对应的包，存放位置可以指定具体的路径,如/ProjectName/src，也可以使用MAVEN来自动生成 -->
		<javaModelGenerator targetPackage="${modelPackage}" targetProject="${targetProject}">
			<!-- 是否生成一个包含全部字段的构造方法 -->
			<property name="constructorBased" value="false"/>
			<!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
			<property name="enableSubPackages" value="true"/>
			<!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
			<property name="trimStrings" value="false"/>
			<!-- 所有生成的Model的基类(是class不是interface)
			<property name="rootClass" value="com.xxx.model.AbstractModel"/>
			 -->
		</javaModelGenerator>
		<!-- 对应的xml mapper文件 -->
		<sqlMapGenerator targetPackage="${xmlMapperPackage}" targetProject="${targetProject}">
			<property name="enableSubPackages" value="true" />
		</sqlMapGenerator>
		<!-- 对应的Mapper接口 -->
		<javaClientGenerator type="XMLMAPPER" targetPackage="${daoMapperPackage}" targetProject="${targetProject}">
			<property name="enableSubPackages" value="true" />
		</javaClientGenerator>

		<!-- ！！！！！！！！！以下需要动态改动，以免覆盖他人代码！！！！！！！！ -->
		
		<!-- 表名对应生成的实体 -->
		<table tableName="upms_app" domainObjectName="UpmsApp" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false">
			<!-- 数据模型的名称 -->
			<property name="modelName" value="应用"/>
			<!-- 数据模型的别名 -->
			<property name="modelAlias" value="App"/>
			<!-- 指定insertModel的插入字段 -->
			<property name="insertModelColumns" value="['app_name', 'description', 'app_key', 'app_secret', 'app_web_context_path', 'app_api_context_path', 'create_time']"/>
			<!-- Model注释的author -->
			<property name="modelCommentAuthor" value="Mybatis-Generator"/>
			<!-- 对应的Mapper接口上的注解 -->
			<property name="mapperAnnotations" value="com.penglecode.xmodule.common.support.DefaultDatabase"/>
			<!-- selectModelListByExample查询的where条件列 -->
			<property name="exampleQueryWhereColumns" value="{'app_name': 'like', 'app_key': 'eq', 'app_web_context_path': 'eq', 'app_api_context_path': 'eq', 'enabled': 'eq'}"/>
		</table>
		
		<table tableName="upms_user" domainObjectName="UpmsUser" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false">
			<!-- 数据模型的名称 -->
			<property name="modelName" value="应用"/>
			<!-- 数据模型的别名 -->
			<property name="modelAlias" value="User"/>
			<!-- 指定insertModel的插入字段 -->
			<property name="insertModelColumns" value="['user_name', 'real_name', 'password', 'user_type', 'nick_name', 'mobile_phone', 'email', 'user_icon', 'create_time', 'create_by']"/>
			<!-- Model注释的author -->
			<property name="modelCommentAuthor" value="Mybatis-Generator"/>
			<!-- 对应的Mapper接口上的注解 -->
			<property name="mapperAnnotations" value="com.penglecode.xmodule.common.support.DefaultDatabase"/>
			<!-- selectModelListByExample查询的where条件列 -->
			<property name="exampleQueryWhereColumns" value="{'user_name': 'like', 'real_name': 'like', 'user_type': 'eq', 'nick_name': 'like', 'mobile_phone': 'eq', 'email': 'eq', 'status': 'eq'}"/>
		</table>
		
		<table tableName="upms_role" domainObjectName="UpmsRole" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false">
			<!-- 数据模型的名称 -->
			<property name="modelName" value="角色"/>
			<!-- 数据模型的别名 -->
			<property name="modelAlias" value="Role"/>
			<!-- 指定insertModel的插入字段 -->
			<property name="insertModelColumns" value="['role_name', 'role_code', 'role_type', 'description', 'app_id', 'create_time', 'create_by']"/>
			<!-- Model注释的author -->
			<property name="modelCommentAuthor" value="Mybatis-Generator"/>
			<!-- 对应的Mapper接口上的注解 -->
			<property name="mapperAnnotations" value="com.penglecode.xmodule.common.support.DefaultDatabase"/>
			<!-- selectModelListByExample查询的where条件列 -->
			<property name="exampleQueryWhereColumns" value="{'role_name': 'like', 'role_code': 'like', 'role_type': 'eq', 'app_id': 'eq'}"/>
		</table>
		
		<table tableName="upms_resource" domainObjectName="UpmsResource" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false">
			<!-- 数据模型的名称 -->
			<property name="modelName" value="资源"/>
			<!-- 数据模型的别名 -->
			<property name="modelAlias" value="Resource"/>
			<!-- 指定insertModel的插入字段 -->
			<property name="insertModelColumns" value="['resource_name', 'parent_resource_id', 'app_root_resource', 'permission_expression', 'resource_url', 'resource_type', 'http_method', 'action_type', 'siblings_index', 'resource_icon', 'index_page', 'app_id', 'create_time', 'create_by']"/>
			<!-- Model注释的author -->
			<property name="modelCommentAuthor" value="Mybatis-Generator"/>
			<!-- 对应的Mapper接口上的注解 -->
			<property name="mapperAnnotations" value="com.penglecode.xmodule.common.support.DefaultDatabase"/>
			<!-- selectModelListByExample查询的where条件列 -->
			<property name="exampleQueryWhereColumns" value="{'resource_name': 'like', 'parent_resource_id': 'eq', 'app_root_resource': 'eq', 'resource_url': 'like', 'resource_type': 'eq', 'action_type': 'eq', 'index_page': 'eq'}"/>
		</table>
		
		<table tableName="upms_user_access_log" domainObjectName="UpmsUserAccessLog" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false">
			<!-- 数据模型的名称 -->
			<property name="modelName" value="用户操作日志"/>
			<!-- 数据模型的别名 -->
			<property name="modelAlias" value="UserAccessLog"/>
			<!-- 指定insertModel的插入字段 -->
			<property name="insertModelColumns" value="['log_title', 'app_module', 'request_uri', 'http_method', 'mvc_method', 'request_header', 'request_content_type', 'request_content', 'access_user_id', 'access_time', 'client_ip_addr', 'server_ip_addr', 'process_time', 'logging_completed', 'async_request', 'response_content_type', 'response_content', 'app_id', 'create_time']"/>
			<!-- Model注释的author -->
			<property name="modelCommentAuthor" value="Mybatis-Generator"/>
			<!-- 对应的Mapper接口上的注解 -->
			<property name="mapperAnnotations" value="com.penglecode.xmodule.common.support.DefaultDatabase"/>
			<!-- selectModelListByExample查询的where条件列 -->
			<property name="exampleQueryWhereColumns" value="{'log_title': 'like', 'app_module': 'eq', 'request_uri': 'eq', 'http_method': 'eq', 'access_user_id': 'eq', 'async_request': 'eq', 'logging_completed': 'eq', 'app_id': 'eq'}"/>
		</table>
		
	</context>
</generatorConfiguration>